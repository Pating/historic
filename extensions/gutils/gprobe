#!/usr/bin/python

import os, string
from Gluster.GTmp import Dir
from Gluster.gpartdump import *

distro_db = {
    'slackware' : ['/etc/slackware-version',
                   'slack_style',
                   'cat etc/slackware-version'],
    'debian' : [ '/etc/debian_version',
                 'debian_style',
                 'echo Debian `cat etc/debian_version`'],
    'redhat' : ['/etc/redhat-release',
                'redhat_style',
                'cat etc/redhat-release'],

    'unknown_slack' : [ '/etc/rc.d/rc.inet1',
                        'slack_style',
                        'echo unknown Slackware style distribution'],
    'unknown_debian' : [ '/etc/network/interfaces' ,
                         'debian_style',
                         'echo unknown Debian style distribution'],
    'unknown_redhat' : [ '/etc/sysconfig/network-scripts',
                         'redhat_style',
                         'echo unknown Redhat style distribution']
    }

def get_bootloader (part, _fstab):
    (need_umount, mpoint) = get_mpoint (part)
    if not mpoint:
        return {}
    bootloader = {}
    
    if os.access ("%s/etc/lilo.conf" % mpoint, os.R_OK):
         hnd = os.popen ("grep 'boot *=' %s/etc/lilo.conf | cut -f 2 -d '='"
                         % mpoint)
         bootloader['lilo'] = hnd.readline ().strip ()
         hnd.close ()
    if os.access ("%s/boot/grub/menu.lst" % mpoint, os.R_OK):
         bootloader['grub'] = 'default'
    # If /boot is mapped to another partition, then check for
    # grub/menu.lst in the path
    for k, v in _fstab.iteritems ():
        if '/boot' == v:
            (tmp_need_umount, tmp_mpoint) = get_mpoint (k)
            if not tmp_mpoint:
                unget_mpoint (need_umount, mpoint)
                return {}
            if os.access ("%s/grub/menu.lst" % tmp_mpoint, os.R_OK):
                bootloader['grub'] = 'default'
            unget_mpoint (tmp_need_umount, tmp_mpoint)

    if os.access ("%s/ntldr" % mpoint, os.R_OK) \
           or os.access ("%s/boot.ini" % mpoint, os.R_OK):
        bootloader['windows'] = part #need to check this still
        
    unget_mpoint (need_umount, mpoint)
    return bootloader
    

def get_fstab (part, _parts):
    (need_umount, mpoint) = get_mpoint (part)
    if not mpoint:
        return {}
    fstab = {}
    hnd = os.popen ("cat %s/etc/fstab | grep -v '^#' | awk '{print $1\":\"$2}'" %
                    mpoint)
    fstab_entries = hnd.readlines ()

    for entry in fstab_entries:
        entry_pieces = entry.strip (). split (':')
        if len (entry_pieces) != 2:
            continue
        if len (entry_pieces[0].split ("=")) == 2:
            (l1, l2) = entry_pieces[0].split ("=")
            l2 = l2.strip ('"')
            for p in _parts.keys ():
                if l1 in _parts[p].keys () and l2 == _parts[p][l1]:
                    fstab[p] = entry_pieces[1]
        else:
            if entry_pieces[0] in _parts.keys ():
                fstab[entry_pieces[0]] = entry_pieces[1]
                
    unget_mpoint (need_umount, mpoint)
    return fstab

def get_os_desc (part):
    (need_umount, mpoint) = get_mpoint (part)

    if not mpoint:
        return ('', '')

    the_distro = ''
    the_desc = ''
        
    if os.system ("ls %s/lib/ld-* >/dev/null 2>/dev/null" % mpoint) == 0 \
           or os.system ("ls %s/lib64/ld-* >/dev/null 2>&1" % mpoint) == 0:
        the_distro = 'unknown_gnu/linux'
        the_desc = 'Unknown GNU/Linux distribution'
        for k,v in distro_db.iteritems ():
            if os.access ("%s%s" % (mpoint, v[0]), os.R_OK):
                the_distro = k
                hnd = os.popen ("cd %s ; %s" % (mpoint, v[2]))
                the_desc = hnd.readline ().strip ()
                hnd.close ()
                break
            
    unget_mpoint (need_umount, mpoint)
    return (the_distro, the_desc)

def get_parts ():
    _parts = {}
    hnd = os.popen ("blkid -c /dev/null 2>/dev/null")
    blk_lines = hnd.readlines ()
    hnd.close ()

    for blk_line in blk_lines:
        blk_line_pieces = blk_line.strip ().split ()
        dev_part = blk_line_pieces[0].split (':')[0]
        part_val = {}
        for other_part in blk_line_pieces[1:]:
            other_pieces = other_part.split ('=')
            other_key = other_pieces[0].strip ('"')
            other_val = other_pieces[1].strip ('"')
            part_val[other_key] = other_val
        _parts[dev_part] = part_val
    return _parts

def get_disk_info (_disk):
    _disk_db = {}
    parted_fd = os.popen ("parted -s %s unit %% print" % _disk)
    parted_lines = parted_fd.readlines ()
    parted_fd.close ()
    _pieces = parted_lines[0].split()
    _disk_db[0] = {}
    _disk_db[0]['START'] = _pieces[4]
    _disk_db[0]['END'] = _pieces[6]
    _disk_db[0]['SIZE'] = _pieces[6]
    _disk_db[0]['TYPE'] = 'disk'
    _disk_db[0]['FS'] = ''
    for part_line in parted_lines[3:]:
        _pieces = part_line.strip ().split ()
        _ent = string.atoi (_pieces[0])
        _disk_db[_ent] = {}
        _disk_db[_ent]['START'] = _pieces[1]
        _disk_db[_ent]['END'] = _pieces[2]
        _disk_db[_ent]['SIZE'] = _pieces[3]
        _disk_db[_ent]['TYPE'] = _pieces[4]
        _disk_db[_ent]['FS'] = ''
        if _disk_db[_ent]['TYPE'] in ['logical', 'primary']:
            _disk_db[_ent]['FS'] = _pieces[5]
            if len (_pieces) > 6:
                _disk_db[_ent]['FLAGS'] = _pieces[6:]
        else:
            if len (_pieces) > 5:
                _disk_db[_ent]['FLAGS'] = _pieces[5:]
    return _disk_db

def get_disks ():
    probe_fd = os.popen ("cat /proc/partitions | tail -n +3 | awk '{print $2 \" \" $4}' | grep '^0 ' | cut -f2 -d' ' | sed 's,^,/dev/,'")
    probe_lines = probe_fd.readlines ()
    probe_fd.close ()
    probe_lines = map (string.strip, probe_lines)
    return  probe_lines

def main ():
    _disks = get_disks ()
    _parts = get_parts ()
    disks = {}
    for _disk in _disks:
        disks[_disk] = get_disk_info (_disk)
        for part_no in disks[_disk].keys ():
            part_name = '%s%d' % (_disk, part_no)
            if disks[_disk][part_no]['TYPE'] == 'extended':
                os, desc = '', ''
            else:
                (os, desc) = get_os_desc (part_name)
            disks[_disk][part_no]['XFER'] = 'N'
            disks[_disk][part_no]['OS'] = os
            disks[_disk][part_no]['DESC'] = desc
            disks[_disk][part_no]['FSTAB'] = {}
            disks[_disk][part_no]['BLOADER'] = {}
            if os != '':
                fstab = get_fstab (part_name, _parts)
                disks[_disk][part_no]['FSTAB'] = fstab
                bootloader = get_bootloader (part_name, fstab)
                disks[_disk][part_no]['BLOADER'] = bootloader
            disks[_disk][part_no]['LABEL'] = ''
            if part_name in _parts.keys ():
                if 'LABEL' in _parts[part_name].keys ():
                    disks[_disk][part_no]['LABEL'] = _parts[part_name]['LABEL']

    write_dump (sys.stdout, disks)
    return

main ()

