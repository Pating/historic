#!/usr/bin/python
##
## Copyright (C) 2006 Z RESEARCH <http://www.zresearch.com>
##  
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##  
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##  
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
##  
##

try:
    import getopt, os, sys, string, netdevice
except ImportError, msg:
    print "customize-net: Import Error:", msg


def usage ():
    print """Usage: customize-net [OPTION]... 
Updates network configuration files of native OS for network
interfaces, those are up and running in live mode.

    -h --help         Displays the help menu
    -v --version      Displays the version of the program
    """
    return


def version (prog):
    """ Prints the Version of the program"""
    print prog,": Version 1.0.0 Beta2"
    return


def update_redhat_netconf (os_path, interfaces):
    rv = True
    for interface in interfaces:
        if_name = interface[0]
        if_mac_address = interface[1]
        if_ip_address = interface[2]
        if_netmask = interface[3]
        if_broadcast_address = interface[4]
        if_gateway_address = interface[5]
        if_status = interface[6]
        if_conf_file = "%s/etc/sysconfig/network-scripts/ifcfg-%s" % (os_path, if_name)
        if if_status == 0 or if_name == "lo":
            continue
        try:
            fh = open (if_conf_file, "w")
            fh.write ("## created by GlusterHPC\n")
            fh.write ("DEVICE=%s\n" % if_name)
            fh.write ("ONBOOT=yes\n")
            fh.write ("BOOTPROTO=static\n")
            if if_ip_address != None:
                fh.write ("IPADDR=%s\n" % if_ip_address)
            if if_netmask != None:
                fh.write ("NETMASK=%s\n" % if_netmask)
            if if_gateway_address != None:
                fh.write ("GATEWAY=%s\n" % if_gateway_address)
            fh.close ()
        except IOError:
            rv = False
    return rv


def update_suse_netconf (os_path, interfaces):
    rv = True
    network_config_file = "%s/etc/sysconfig/network/config" % os_path
    command = "sed -i 's/^FORCE_PERSISTENT_NAMES=.*/FORCE_PERSISTENT_NAMES=no/' %s" % network_config_file
    os.system (command)
    command = "rm -f %s/etc/udev/rules.d/3*" % os_path
    os.system (command)
    
    try:
        routes_fh = open ("%s/etc/sysconfig/network/routes" % os_path, "w")
        routes_fh.write ("## created by GlusterHPC\n")
        for interface in interfaces:
            if_name = interface[0]
            if_mac_address = interface[1]
            if_ip_address = interface[2]
            if_netmask = interface[3]
            if_broadcast_address = interface[4]
            if_gateway_address = interface[5]
            if_status = interface[6]
            if if_mac_address != None:
                if_conf_old_file = "%s/etc/sysconfig/network/ifcfg-eth-id-%s" % (os_path, if_mac_address.lower ())
                if_conf_new_file = "%s/etc/sysconfig/network/orig-gluster.ifcfg-eth-id-%s" % (os_path, if_mac_address.lower ())
                try:
                    os.rename (if_conf_old_file, if_conf_new_file)
                except OSError:
                    pass
            if_conf_file = "%s/etc/sysconfig/network/ifcfg-%s" % (os_path, if_name)
            if if_status == 0 or if_name == "lo":
                continue
            try:
                fh = open (if_conf_file, "w")
                fh.write ("## created by GlusterHPC\n")
                fh.write ("STARTMODE='auto'\n")
                fh.write ("BOOTPROTO='static'\n")
                if if_ip_address != None:
                    fh.write ("IPADDR='%s'\n" % if_ip_address)
                if if_netmask != None:
                    fh.write ("NETMASK='%s'\n" % if_netmask)
                fh.close ()
            except IOError:
                rv = False
            if if_gateway_address != None:
                routes_fh.write ("default %s - %s\n" % (if_gateway_address, if_name))
        routes_fh.close ()
    except IOError:
        rv = False
    return rv


def update_debian_netconf (os_path, interfaces):
    rv = True
    if_conf_file = "%s/etc/network/interfaces" % os_path
    try:
        fh = open (if_conf_file, "w")
        fh.write ("## created by GlusterHPC\n")
        for interface in interfaces:
            if_name = interface[0]
            if_mac_address = interface[1]
            if_ip_address = interface[2]
            if_netmask = interface[3]
            if_broadcast_address = interface[4]
            if_gateway_address = interface[5]
            if_status = interface[6]

            if if_name == "lo":
                fh.write ("auto lo\n")
                fh.write ("iface lo inet loopback\n")
                fh.write ("\n")
                continue
            
            if if_status == 0:
                continue
            
            fh.write ("auto %s\n" % if_name)
            fh.write ("iface %s inet static\n" % if_name)
            if if_ip_address != None:
                fh.write ("\taddress %s\n" % if_ip_address)
            if if_netmask != None:
                fh.write ("\tnetmask %s\n" % if_netmask)
            if if_gateway_address != None:
                fh.write ("\tgateway %s\n" % if_gateway_address)
            fh.write ("\n")
        fh.close ()
    except IOError:
        rv = False
    return rv


def update_slackware_netconf (os_path, interfaces):
    rv = True
    if_conf_file = "%s/etc/rc.d/rc.inet1.conf" % os_path
    i = 0
    try:
        fh = open (if_conf_file, "w")
        fh.write ("## created by GlusterHPC\n")
        for interface in interfaces:
            if_name = interface[0]
            if_mac_address = interface[1]
            if_ip_address = interface[2]
            if_netmask = interface[3]
            if_broadcast_address = interface[4]
            if_gateway_address = interface[5]
            if_status = interface[6]
            
            if if_status == 0 or if_name == "lo":
                continue
            
            fh.write ("IFNAME[%d]=\"%s\"\n" % (i, if_name))
            if if_ip_address != None:
                fh.write ("IPADDR[%d]=\"%s\"\n" % (i, if_ip_address))
            if if_netmask != None:
                fh.write ("NETMASK[%d]=\"%s\"\n" % (i, if_netmask))
            fh.write ("USE_DHCP[%d]=\"no\"\n" % i)
            if if_gateway_address != None:
                fh.write ("GATEWAY=\"%s\"\n" % if_gateway_address)
            fh.write ("\n")
        fh.close ()
    except IOError:
        rv = False
    return rv


def update_iface (os_path):
    interfaces = netdevice.getinterfaces ()
    if len (interfaces) == 0:
        return True
    
    ## if Redhat/Fedora flavor
    if (os.access ("%s/etc/redhat-release" % os_path, os.F_OK) or 
        os.access ("%s/etc/fedora-release" % os_path, os.F_OK)):
        return update_redhat_netconf (os_path, interfaces)
    
    ## if SuSE flavor
    if os.access ("%s/etc/SuSE-release" % os_path, os.F_OK):
        return update_suse_netconf (os_path, interfaces)
    
    ## if Debian flavor
    if os.access ("%s/etc/debian_version" % os_path, os.F_OK):
        return update_debian_netconf (os_path, interfaces)
    
    ## if Slackware flavor
    if os.access ("%s/etc/slackware-version" % os_path, os.F_OK):
        return update_slackware_netconf (os_path, interfaces)
    
    return False


def main():
    """ Main function """
    try:
        opt, args = getopt.gnu_getopt (sys.argv[1:], "hv",
                                   ["help",
                                    "version"])
    except getopt.GetoptError, msg:
        print msg
        usage ()
        sys.exit (1)

    for (option, value) in opt:
        if option == "-h" or option == "--help":
            usage ()
            return
        elif option == "-v" or option == "--version":
            print version (sys.argv[0])
            return

    if not len(args):
        return
    
    os_path = args[0]
    update_iface (os_path)

    hostname = os.popen ("hostname").readline ().strip ()
    domainname = os.popen ("hostname -d").readline ().strip ()

    if os.access ('%s/etc/hostname' % os_path, os.R_OK):
        if not os.access ("%s/etc/hostname.orig-gluster" % os_path, os.R_OK):
            os.system ("cp %s/etc/hostname %s/etc/hostname.orig-gluster" %
                       (os_path, os_path))
        os.system ("echo '%s.%s' > %s/etc/hostname" %
                   (hostname, domainname, os_path))
    
    if os.access ('%s/etc/HOSTNAME' % os_path, os.R_OK):
        if not os.access ("%s/etc/HOSTNAME.orig-gluster" % os_path, os.R_OK):
            os.system ("cp %s/etc/HOSTNAME %s/etc/HOSTNAME.orig-gluster" %
                       (os_path, os_path))
        os.system ("echo '%s.%s' > %s/etc/HOSTNAME" %
                   (hostname, domainname, os_path))

    if os.access ('%s/etc/sysconfig/network' % os_path, os.R_OK):
        if not os.access ("%s/etc/sysconfig/network.orig-gluster" % os_path, os.R_OK):
            os.system ("cp %s/etc/sysconfig/network %s/etc/sysconfig/network.orig-gluster" %
                       (os_path, os_path))
        os.system ("sed -i -e 's/NAME=.*/NAME=%s/' %s/etc/sysconfig/network" %
                   (hostname, os_path))

    if not os.access ("%s/etc/resolv.conf.orig-gluster" % os_path, os.R_OK):
        os.system ("cp %s/etc/resolv.conf %s/etc/resolv.conf.orig-gluster" %
                   (os_path, os_path))
    os.system ("cp -af /etc/resolv.conf %s/etc/" % os_path)

    return

main()
